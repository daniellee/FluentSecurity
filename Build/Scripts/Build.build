<?xml version="1.0"?>
<project name="Build" default="Default">
	
<!-- *******************************************************************************
							START PROJECT CONFIGURATION
******************************************************************************** -->
	
	<!-- PUBLIC TARGETS
		These targets do not contain any markup. They should only act as an entry point and
		depend on other tasks. These are the targets you intend to get called from any
		command line or build server. Feel free to add, remove and customize to fit your needs.
	-->
	<target name="Minimal" description="Compiles" depends="Clean, AssemblyInfo, Compile" />
	<target name="Default" description="Compiles and runs tests" depends="Clean, AssemblyInfo, Compile, Run-Unit-Tests" />
	<target name="Full" description="Compiles, runs tests and publishes" depends="Clean, AssemblyInfo, Compile, Run-Unit-Tests, Run-Acceptance-Tests, Package, Publish" />
	<target name="Pack" description="Package" depends="Package" />

	<!-- ROOT DIRECTORY
		Must be relative to this file
	-->
	<property name="dir.root"			value="..\..\"/> 

	<!-- COMMON DIRECTORIES
		Directories used in the build process.
	-->
	<property name="dir.source"			value="${dir.root}\"/>
	<property name="dir.dependencies"	value="${dir.root}Dependencies\"/>
	<property name="dir.packages"		value="${dir.root}Packages\"/>
	<property name="dir.tools"			value="${dir.root}Tools\"/>
	
	<property name="dir.build"			value="${dir.root}Build\"/>
	<property name="dir.output"			value="${dir.build}Output\"/>
	<property name="dir.reports"		value="${dir.build}Reports\"/>
	<property name="dir.artifacts"		value="${dir.build}Artifacts\"/>
	
	<!-- COMMON ASSEMBLY INFO
		Properties used when creating the common assembly info file
	-->
	<property name="project.version.number" value="1.3.0" />
	<property name="project.version.label" value="1.3.0" /><!-- Example: 1.0.0Beta1 -->
	<property name="project.config" value="release" />
	
	<!-- PROJECTS TO BUILD
		Declares the projects to build. You can also specify a solution file (.sln) if you want.
	-->
	<fileset id="projects">
		<include name="${dir.source}FluentSecurity.sln" />
	</fileset>
	
	<!-- TEST AND ACCEPTANCE TEST ASSEMBLIES
		Patterns for unit and acceptance -test assemblies.
	-->
	<fileset id="unit-test-assemblies" basedir="${dir.output}">
		<include name="*.Specification.dll" />
	</fileset>
	<fileset id="acceptance-test-assemblies" basedir="${dir.output}">
	</fileset>
	
	<!-- TEST RUNNER
		Path to the NUnit console.
	-->
	<property name="nunit.console" value="${dir.packages}NUnit.2.5.10.11092\tools\nunit-console.exe"/>
	
	<!-- NUGET CONSOLE
		Path to the NuGet console.
	-->
	<property name="nuget.console" value="${dir.packages}NuGet.CommandLine.1.4.20615.182\tools\NuGet.exe"/>
	
	
	<!-- VERBOSE
		Set to true if you want the build process to be verbose.
		Most commonly used when debugging the build process.
	-->
	<property name="verbose" value="False"/>

<!-- *******************************************************************************
							END PROJECT CONFIGURATION
******************************************************************************** -->
	
	<!-- INTERNAL PROPERTIES
		These properties should not be modified unless you really know what you are doing.
	-->
	<property name="nant.settings.currentframework" value="net-3.5"/>
	<property name="msbuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
	<property name="msbuild.verbosity" value="Quiet"/>
	<property name="msbuild.verbosity" value="Normal" if="${verbose}" />
	<property name="nunit.failure" value="0" />

	<!-- INTERNAL TARGETS
		These properties should not be modified unless you really know what you are doing.
	-->
	<target name="Clean" description="Clean up">
	
		<delete verbose="${verbose}">
			<fileset>
				<include name="${dir.output}\**.*" />
				<include name="${dir.reports}\**.*" />
				<include name="${dir.artifacts}\**\*" />
			</fileset>
		</delete>
		
	</target>
	
	<target name="AssemblyInfo" description="Create CommonAssemblyInfo">
	
		<property name="assembly-version" value="${project.version.number}.0000" />
		<property name="file-version" value="${project.version.number}.0000" />

		<asminfo output="..\..\CommonAssemblyInfo.cs" language="CSharp" verbose="${verbose}">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.InteropServices" />
			</imports>
			<attributes>
				<attribute type="ComVisibleAttribute" value="false" />
				<attribute type="AssemblyVersionAttribute" value="${assembly-version}" />
				<attribute type="AssemblyCopyrightAttribute" value="Copyright (c) 2009-2011, Kristoffer Ahl" />
				<attribute type="AssemblyProductAttribute" value="FluentSecurity" />
				<attribute type="AssemblyTitleAttribute" value="FluentSecurity" />
				<attribute type="AssemblyCompanyAttribute" value="" />
				<attribute type="AssemblyConfigurationAttribute" value="${project.config}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${file-version}" />
				<attribute type="AssemblyFileVersionAttribute" value="${file-version}" />
			</attributes>
			<references>
				<include name="System.dll" />
			</references>
		</asminfo>
	
	</target>
	
	<target name="Compile" description="Compile">
	
		<foreach item="File" property="project">
			<in>
				<items refid="projects" />
			</in>
			<do>
				<echo message="*************************************************" if="${verbose}" />
				<echo message="Compiling ${path::get-file-name(project)}" />
				<echo message="*************************************************" if="${verbose}" />

				<exec program="${msbuild.exe}">
					<arg value="${project}" />
					<arg value="/nologo" unless="${verbose}" />
					<arg value="/p:Configuration=Release" />
					<arg value="/p:TargetFrameworkVersion=v3.5" />
					<arg value="/v:${msbuild.verbosity}" />
				</exec>
				
				<echo if="${verbose}" />
			</do>
		</foreach>
	
	</target>
	
	<target name="Run-Unit-Tests" description="Run unit tests">
	
		<mkdir dir="${dir.reports}" failonerror="false" verbose="${verbose}" />
	
		<foreach item="File" property="filename">
			<in>
				<items refid="unit-test-assemblies" />
			</in>
			<do>
				<echo message="*************************************************" if="${verbose}" />
				<echo message="Running unit tests in ${path::get-file-name(filename)}" if="${verbose}" />
				<echo message="*************************************************" if="${verbose}" />
							
				<exec program="${nunit.console}" failonerror="false" resultproperty="testresult">
					<arg value="${filename}" />
					<arg value="/nologo" unless="${verbose}" />
					<arg value="/xml=${dir.reports}\${path::get-file-name-without-extension(filename)}-Results.xml" />
				</exec>
				
				<property name="nunit.failure" value="${testresult}" unless="${int::parse(nunit.failure) != 0}" />
								
				<echo message="" if="${verbose}" />
				<echo message="" if="${verbose}" />
			</do>
		</foreach>
		
		<fail message="Failures reported in unit tests." unless="${int::parse(nunit.failure) == 0}" />
	
	</target>
	
	<target name="Run-Acceptance-Tests" description="Run acceptance tests">
	
		<mkdir dir="${dir.reports}" failonerror="false" verbose="${verbose}" />
	
		<foreach item="File" property="filename">
			<in>
				<items refid="acceptance-test-assemblies" />
			</in>
			<do>
				<echo message="*************************************************" if="${verbose}" />
				<echo message="Running acceptance tests in ${path::get-file-name(filename)}" if="${verbose}" />
				<echo message="*************************************************" if="${verbose}" />
							
				<exec program="${nunit.console}" failonerror="false" resultproperty="testresult">
					<arg value="${filename}" />
					<arg value="/nologo" unless="${verbose}" />
					<arg value="/xml=${dir.reports}\${path::get-file-name-without-extension(filename)}-Results.xml" />
				</exec>
				
				<property name="nunit.failure" value="${testresult}" unless="${int::parse(nunit.failure) != 0}" />
								
				<echo message="" if="${verbose}" />
				<echo message="" if="${verbose}" />
			</do>
		</foreach>
		
		<fail message="Failures reported in acceptance tests." unless="${int::parse(nunit.failure) == 0}" />
		
	</target>
	
	<target name="Package" description="Creates build artifacts">
	
		<copy todir="${dir.artifacts}FluentSecurity\" verbose="${verbose}">
			<fileset basedir="${dir.output}">
				<include name="FluentSecurity.dll" />
				<include name="FluentSecurity.TestHelper.dll" />
				<include name="..\..\License.txt" />
				<include name="..\..\Readme.txt" />
			</fileset>
		</copy>
	
		<zip zipfile="${dir.artifacts}FluentSecurity-${project.version.label}.zip" verbose="${verbose}">
			<fileset basedir="${dir.artifacts}FluentSecurity\">
				<include name="**\*.*" />
			</fileset>
		</zip>
		
		<copy todir="${dir.build}" overwrite="true" verbose="${verbose}">
			<fileset basedir="${dir.build}NuGet\">
				<include name="*.nuspec" />
			</fileset>
			<filterchain>
				<replacetokens>
					<token key="CURRENT-VERSION" value="${project.version.number}" />
				</replacetokens>
			</filterchain>
		</copy>
		
		<exec program="${nuget.console}" failonerror="true">
			<arg value="pack" />
			<arg value="${dir.build}FluentSecurity.nuspec" />
			<arg value="-o" />
			<arg value="${dir.artifacts}" />
		</exec>
		
		<exec program="${nuget.console}" failonerror="true">
			<arg value="pack" />
			<arg value="${dir.build}FluentSecurity.TestHelper.nuspec" />
			<arg value="-o" />
			<arg value="${dir.artifacts}" />
		</exec>
		
		<if test="${directory::exists('C:\Develop\NuGet-Packages')}">
			<echo message="Publishing NuGet packages to local feed directory" if="${verbose}" />
			<copy todir="C:\Develop\NuGet-Packages" overwrite="true" verbose="${verbose}">
				<fileset basedir="${dir.artifacts}">
					<include name="*.nupkg" />
				</fileset>
			</copy>
		</if>
	
	</target>
	
	<target name="Publish" description="Publishes build artifacts">
	
		<echo message="No publishing tasks have been defined" if="${verbose}" />
	
	</target>

</project>