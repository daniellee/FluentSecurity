<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentFilters</name>
    </assembly>
    <members>
        <member name="M:FluentFilters.IFilterCriteriaBuilder.Require(FluentFilters.IFilterCriteria)">
            <summary>
            Add required criteria
            </summary>
        </member>
        <member name="M:FluentFilters.IFilterCriteriaBuilder.Exclude(FluentFilters.IFilterCriteria)">
            <summary>
            Add excluded criteria
            </summary>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.Require(FluentFilters.IFilterCriteria)">
            <summary>
            Add required criteria
            </summary>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.Exclude(FluentFilters.IFilterCriteria)">
            <summary>
            Add excluded criteria
            </summary>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.GetResults">
            <summary>
            Gets the results
            </summary>
        </member>
        <member name="M:FluentFilters.IRequireResult.And(FluentFilters.IFilterCriteria)">
            <summary>
            Add required criteria
            </summary>
            <param name="criteria">The criteria</param>
            <returns></returns>
        </member>
        <member name="M:FluentFilters.IRequireResult.Or(FluentFilters.IFilterCriteria)">
            <summary>
            Add required criteria that will be used if previous required criteria chain are false
            </summary>
            <param name="criteria">The criteria</param>
            <returns></returns>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.RequireResult.And(FluentFilters.IFilterCriteria)">
            <summary>
            Add required criteria
            </summary>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.RequireResult.Or(FluentFilters.IFilterCriteria)">
            <summary>
            Add required criteria that will be used if previous required criteria are false
            </summary>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.RequireResult.GetLevel">
            <summary>
            Gets level for current required criteria chain
            </summary>
        </member>
        <member name="M:FluentFilters.IExcludeResult.And(FluentFilters.IFilterCriteria)">
            <summary>
            Add criteria for excluding
            </summary>
        </member>
        <member name="M:FluentFilters.IExcludeResult.Or(FluentFilters.IFilterCriteria)">
            <summary>
            Add criteria for excluding that will be used if previous chain of criteria which should be  excluded are false
            </summary>
            <param name="criteria">The criteria</param>
            <returns></returns>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.ExcludeResult.And(FluentFilters.IFilterCriteria)">
            <summary>
            Add excluded criteria
            </summary>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.ExcludeResult.Or(FluentFilters.IFilterCriteria)">
            <summary>
            Add criteria for excluding that will be used if previous chain of criteria which should be  excluded are false
            </summary>
            <param name="criteria">The criteria</param>
            <returns></returns>
        </member>
        <member name="M:FluentFilters.FilterCriteriaBuilder.ExcludeResult.GetLevel">
            <summary>
            Gets level for current required criteria chain
            </summary>
        </member>
        <member name="M:FluentFilters.IFilterRegistry.Clear">
            <summary>
            Clear all registered filters
            </summary>
        </member>
        <member name="M:FluentFilters.IFilterRegistry.Add``1">
            <summary>
            Add action filter that will be used for all application
            </summary>
            <typeparam name="T">Filter type</typeparam>
        </member>
        <member name="M:FluentFilters.IFilterRegistry.Add``1(System.Action{FluentFilters.IFilterCriteriaBuilder})">
            <summary>
            Add action filter and specify criteria
            </summary>
            <typeparam name="T">Filter type</typeparam>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.IFilterRegistry.Remove``1">
            <summary>
            Remove the action filter by specified type
            </summary>
            <typeparam name="T">Filter type</typeparam>
        </member>
        <member name="M:FluentFilters.IFilterRegistry.GetFilters(FluentFilters.FilterRegistryContext)">
            <summary>
            Gets registered filters
            </summary>
        </member>
        <member name="M:FluentFilters.IFilterRegistry.GetFilterInstance(System.Type)">
            <summary>
            Get registered filter instance by type
            </summary>
            <param name="filterType">Filter type</param>
        </member>
        <member name="M:FluentFilters.FilterRegistry.Clear">
            <summary>
            Clear all registered filters
            </summary>
        </member>
        <member name="M:FluentFilters.FilterRegistry.Add``1">
            <summary>
            Add action filter that will be used for all application
            </summary>
            <typeparam name="T">Filter type</typeparam>
        </member>
        <member name="M:FluentFilters.FilterRegistry.Add``1(System.Action{FluentFilters.IFilterCriteriaBuilder})">
            <summary>
            Add action filter and specify criteria
            </summary>
            <typeparam name="T">Filter type</typeparam>
            <param name="criteria">The criteria</param>
        </member>
        <member name="M:FluentFilters.FilterRegistry.Remove``1">
            <summary>
            Remove the action filter by specified type
            </summary>
            <typeparam name="T">Filter type</typeparam>
        </member>
        <member name="M:FluentFilters.FilterRegistry.GetFilters(FluentFilters.FilterRegistryContext)">
            <summary>
            Gets registered filters
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FluentFilters.FilterRegistry.GetFilterInstance(System.Type)">
            <summary>
            Get registered filter instance by type
            </summary>
            <param name="filterType">Type of the filter</param>
            <returns></returns>
        </member>
        <member name="M:FluentFilters.Criteria.ControllerFilterCriteria.#ctor(System.String)">
            <summary>
            Filter by specified controller
            </summary>
            <param name="controllerName">Name of the controller</param>
        </member>
        <member name="P:FluentFilters.FluentFiltersBuilder.Registry">
            <summary>
            Get or set FilterRegistry instance in current application state
            </summary>
        </member>
        <member name="P:FluentFilters.FluentFiltersBuilder.Current">
            <summary>
            Get instance of FilterRegistry
            </summary>
        </member>
        <member name="F:FluentFilters.Criteria.AreaFilterCriteria._areaName">
            <summary>
            Name of the area
            </summary>
        </member>
        <member name="M:FluentFilters.Criteria.AreaFilterCriteria.#ctor">
            <summary>
            Filter by root area
            </summary>
        </member>
        <member name="M:FluentFilters.Criteria.AreaFilterCriteria.#ctor(System.String)">
            <summary>
            Filter for specified area
            </summary>
            <param name="areaName">Name of the area</param>
        </member>
        <member name="M:FluentFilters.FluentFiltersActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Retrieves information about the action filters
            </summary>
            <param name="controllerContext">The controller context</param>
            <param name="actionDescriptor">The action descriptor</param>
            <returns>Information about the action filters</returns>
        </member>
        <member name="M:FluentFilters.Criteria.ActionFilterCriteria.#ctor(System.String)">
            <summary>
            Filter by specified action
            </summary>
            <param name="actionName">Name of the action</param>
        </member>
    </members>
</doc>
